using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using RPPP_WebApp.Controllers;
using RPPP_WebApp.Model;

namespace RPPP_WebApp.Services.Impl
{
  /// <summary>
  /// Service for handling product-related operations.
  /// </summary>
  public class ProductService : IProductService
    {
        private readonly Rppp01Context _context;

    /// <summary>
    /// Initializes a new instance of the <see cref="ProductService"/> class.
    /// </summary>
    /// <param name="context">The database context.</param>
    public ProductService(Rppp01Context context)
        {
            _context = context;
        }

    /// <inheritdoc/>
    public async Task<int> Count(string filter)
        {
            if (string.IsNullOrEmpty(filter))
            {
                return await _context.Product.CountAsync();
            }
            else
            {
                return await _context.Product.CountAsync(p => p.Name.Contains(filter));
            }
        }

    /// <inheritdoc/>
    public async Task<IActionResult> Create(Product model)
        {
            if (model == null)
            {
                return new BadRequestResult();
            }

            // Assuming ID is generated by the server and should not be set by the client.
            model.Id = Guid.NewGuid();
            _context.Product.Add(model);
            await _context.SaveChangesAsync();

            return new CreatedAtActionResult(nameof(ProductController.GetAll), "Product", new { id = model.Id }, model);
        }

    /// <inheritdoc/>
    public async Task<IActionResult> Delete(Guid id)
        {
            var product = await _context.Product.FindAsync(id);
            if (product == null)
            {
                return new NotFoundResult();
            }

            _context.Product.Remove(product);
            await _context.SaveChangesAsync();

            return new NoContentResult();
        }

    /// <inheritdoc/>
    public async Task<ActionResult<Product>> Get(Guid id)
        {
            var product = await _context.Product.FindAsync(id);
            if (product == null)
            {
                return new NotFoundResult();
            }

            return new ActionResult<Product>(product);
        }

    /// <inheritdoc/>
    public async Task<List<Product>> GetAll(LoadParams loadParams)
        {
            // Apply the filter if it exists.
            IQueryable<Product> query = _context.Product;
            if (!string.IsNullOrEmpty(loadParams.Filter))
            {
                query = query.Where(p => p.Name.Contains(loadParams.Filter));
            }

            // Apply sorting if a sort column is specified.
            if (!string.IsNullOrEmpty(loadParams.SortColumn))
            {
                // Implement a switch or if-else statements to handle different sort columns.
                // This example assumes you can sort by "Name".
                switch (loadParams.SortColumn.ToLower())
                {
                    case "name":
                        query = loadParams.Descending
                            ? query.OrderByDescending(p => p.Name)
                            : query.OrderBy(p => p.Name);
                        break;
                    // Add cases for other sortable columns.
                    default:
                        // Optionally handle unknown column names.
                        break;
                }
            }

            // Execute the query to get the products as a list.
            List<Product> products = await query.ToListAsync();

    
            int startIndex = Math.Max(loadParams.StartIndex, 0); 
            int count = Math.Min(loadParams.Rows, products.Count - startIndex); 
            return products.GetRange(startIndex, count);
        }

    /// <inheritdoc/>
    public async Task<IActionResult> Update(Guid id, Product model)
        {
            if (model == null || id != model.Id)
            {
                return new BadRequestResult();
            }

            var existingProduct = await _context.Product.FindAsync(id);
            if (existingProduct == null)
            {
                return new NotFoundResult();
            }

            // Update the properties of the existing product with the new values
            _context.Entry(existingProduct).CurrentValues.SetValues(model);

            // Alternatively, you can update properties one by one:
            // existingProduct.Name = model.Name;
            // ...and so on for other properties that should be updated

            await _context.SaveChangesAsync();

            return new NoContentResult();
        }
    }
}
